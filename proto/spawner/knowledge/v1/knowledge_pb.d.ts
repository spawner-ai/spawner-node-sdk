// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/knowledge/v1/knowledge.proto (package spawner.knowledge.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum spawner.knowledge.v1.KnowledgeSourceType
 */
export declare enum KnowledgeSourceType {
  /**
   * @generated from enum value: KNOWLEDGE_SOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Manually added from the console.
   *
   * @generated from enum value: KNOWLEDGE_SOURCE_TYPE_MANUAL = 1;
   */
  MANUAL = 1,

  /**
   * Added by scraping websites using Spawner spider.
   *
   * @generated from enum value: KNOWLEDGE_SOURCE_TYPE_WEB = 2;
   */
  WEB = 2,
}

/**
 * @generated from message spawner.knowledge.v1.KnowledgeSource
 */
export declare class KnowledgeSource extends Message<KnowledgeSource> {
  /**
   * @generated from field: spawner.knowledge.v1.KnowledgeSourceType type = 1;
   */
  type: KnowledgeSourceType;

  /**
   * The URI of the item source. The URI is usually set for
   * the 'WEB' source type, to allow the client to places
   * links to its source.
   *
   * Assume empty for source types other than 'WEB'.
   *
   * @generated from field: string uri = 2;
   */
  uri: string;

  constructor(data?: PartialMessage<KnowledgeSource>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.knowledge.v1.KnowledgeSource";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnowledgeSource;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnowledgeSource;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnowledgeSource;

  static equals(a: KnowledgeSource | PlainMessage<KnowledgeSource> | undefined, b: KnowledgeSource | PlainMessage<KnowledgeSource> | undefined): boolean;
}

/**
 * @generated from message spawner.knowledge.v1.KnowledgeReference
 */
export declare class KnowledgeReference extends Message<KnowledgeReference> {
  /**
   * Output only. Relative resource path.
   * Format: `workspaces:{workspace_id}:knowledge:{knowledge_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Indicates the source of knowledge.
   *
   * @generated from field: spawner.knowledge.v1.KnowledgeSource source = 2;
   */
  source?: KnowledgeSource;

  constructor(data?: PartialMessage<KnowledgeReference>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.knowledge.v1.KnowledgeReference";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnowledgeReference;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnowledgeReference;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnowledgeReference;

  static equals(a: KnowledgeReference | PlainMessage<KnowledgeReference> | undefined, b: KnowledgeReference | PlainMessage<KnowledgeReference> | undefined): boolean;
}

/**
 * @generated from message spawner.knowledge.v1.KnowledgeEvent
 */
export declare class KnowledgeEvent extends Message<KnowledgeEvent> {
  /**
   * Output only. Identifies a grouping of multiple packages.
   *
   * @generated from field: string utterance_id = 1;
   */
  utteranceId: string;

  /**
   * Output only. Indicates the knowledge referenced.
   *
   * @generated from field: repeated spawner.knowledge.v1.KnowledgeReference references = 2;
   */
  references: KnowledgeReference[];

  constructor(data?: PartialMessage<KnowledgeEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.knowledge.v1.KnowledgeEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnowledgeEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnowledgeEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnowledgeEvent;

  static equals(a: KnowledgeEvent | PlainMessage<KnowledgeEvent> | undefined, b: KnowledgeEvent | PlainMessage<KnowledgeEvent> | undefined): boolean;
}

