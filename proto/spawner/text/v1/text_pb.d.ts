// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/text/v1/text.proto (package spawner.text.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message spawner.text.v1.CommandTriggered
 */
export declare class CommandTriggered extends Message<CommandTriggered> {
  /**
   * Relative resource path.
   * Format: `workspaces:{workspace_id}:commands:{command_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Custom identifier set in the workspace.
   *
   * @generated from field: string custom_id = 2;
   */
  customId: string;

  constructor(data?: PartialMessage<CommandTriggered>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.text.v1.CommandTriggered";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandTriggered;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandTriggered;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandTriggered;

  static equals(a: CommandTriggered | PlainMessage<CommandTriggered> | undefined, b: CommandTriggered | PlainMessage<CommandTriggered> | undefined): boolean;
}

/**
 * TextEvent represents text input and output.
 * Assumes output streamed per token using `delta` value.
 *
 * @generated from message spawner.text.v1.TextEvent
 */
export declare class TextEvent extends Message<TextEvent> {
  /**
   * Required. Identifies a grouping of multiple packages. For example,
   * a text event may trigger emotion events, etc. The client should be
   * able to identify related packets.
   *
   * @generated from field: string utterance_id = 1;
   */
  utteranceId: string;

  /**
   * Represents text input or output. For output text,
   * the content of this field may not be the final result; for
   * finalized text, use `final`.
   *
   * @generated from field: string text = 2;
   */
  text: string;

  /**
   * Only output. The most recent token generated. Value is expected to be
   * used to display streamed response in runtime.
   *
   * @generated from field: string delta = 3;
   */
  delta: string;

  /**
   * Only output. Indicates that the text generation has finalized.
   * Note that the value of `text` may change as long as this is False.
   *
   * @generated from field: bool final = 4;
   */
  final: boolean;

  /**
   * Only output. Indicates the command that was triggered. This is only
   * populated when a command has been triggered.
   *
   * @generated from field: spawner.text.v1.CommandTriggered command = 5;
   */
  command?: CommandTriggered;

  constructor(data?: PartialMessage<TextEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.text.v1.TextEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextEvent;

  static equals(a: TextEvent | PlainMessage<TextEvent> | undefined, b: TextEvent | PlainMessage<TextEvent> | undefined): boolean;
}

