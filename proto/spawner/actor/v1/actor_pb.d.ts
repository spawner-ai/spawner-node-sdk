// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/actor/v1/actor.proto (package spawner.actor.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Encapsulates properties of a player. Used to populate the
 * user's profile for text generation, long-term memory management, etc.
 *
 * @generated from message spawner.actor.v1.PlayerActor
 */
export declare class PlayerActor extends Message<PlayerActor> {
  /**
   * Required field. Value should be unique for each player.
   * Spawner API does not verify consistency or uniqueness of the value.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Name of the player.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Age group of player.
   * Refer to latest documentation for expected values.
   *
   * @generated from field: string age_group = 3;
   */
  ageGroup: string;

  /**
   * Gender of player.
   * Refer to latest documentation for expected values.
   *
   * @generated from field: string gender = 4;
   */
  gender: string;

  /**
   * The text description of the player.
   *
   * @generated from field: string description = 5;
   */
  description: string;

  constructor(data?: PartialMessage<PlayerActor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.actor.v1.PlayerActor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerActor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerActor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerActor;

  static equals(a: PlayerActor | PlainMessage<PlayerActor> | undefined, b: PlayerActor | PlainMessage<PlayerActor> | undefined): boolean;
}

/**
 * Encapsulates the identifiers of a character.
 *
 * @generated from message spawner.actor.v1.CharacterActor
 */
export declare class CharacterActor extends Message<CharacterActor> {
  /**
   * Only output. Relative resource path.
   * Format: `workspaces:{workspace_id}:characters:{character_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Name of the character.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Indicates the custom identifier of the character. Note that it
   * may differ from the character id used for storage.
   *
   * @generated from field: string custom_id = 3;
   */
  customId: string;

  constructor(data?: PartialMessage<CharacterActor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.actor.v1.CharacterActor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CharacterActor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CharacterActor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CharacterActor;

  static equals(a: CharacterActor | PlainMessage<CharacterActor> | undefined, b: CharacterActor | PlainMessage<CharacterActor> | undefined): boolean;
}

/**
 * Defines the actors within a channel.
 *
 * @generated from message spawner.actor.v1.Actor
 */
export declare class Actor extends Message<Actor> {
  /**
   * @generated from field: repeated spawner.actor.v1.PlayerActor players = 1;
   */
  players: PlayerActor[];

  /**
   * @generated from field: repeated spawner.actor.v1.CharacterActor characters = 2;
   */
  characters: CharacterActor[];

  constructor(data?: PartialMessage<Actor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.actor.v1.Actor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Actor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Actor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Actor;

  static equals(a: Actor | PlainMessage<Actor> | undefined, b: Actor | PlainMessage<Actor> | undefined): boolean;
}

