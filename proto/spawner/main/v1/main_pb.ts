// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file spawner/main/v1/main.proto (package spawner.main.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { ErrorEvent } from "../../error/v1/error_pb";
import { file_spawner_error_v1_error } from "../../error/v1/error_pb";
import type { LanguageCode } from "../../language_code/v1/language_code_pb";
import { file_spawner_language_code_v1_language_code } from "../../language_code/v1/language_code_pb";
import type { SpawnerPacketSchema } from "../../packet/v1/packet_pb";
import { file_spawner_packet_v1_packet } from "../../packet/v1/packet_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file spawner/main/v1/main.proto.
 */
export const file_spawner_main_v1_main: GenFile = /*@__PURE__*/
  fileDesc("ChpzcGF3bmVyL21haW4vdjEvbWFpbi5wcm90bxIPc3Bhd25lci5tYWluLnYxIl4KFEZlYXR1cmVDb25maWd1cmF0aW9uEg8KB2Vtb3Rpb24YASABKAgSFAoMaW5wdXRfZmlsdGVyGAIgASgIEg8KB2NvbW1hbmQYAyABKAgSDgoGbWVtb3J5GAQgASgIIvABChtHZW5lcmF0ZVNlc3Npb25Ub2tlblJlcXVlc3QSDwoHYXBpX2tleRgBIAEoCRISCgphcGlfc2VjcmV0GAIgASgJEhQKDHdvcmtzcGFjZV9pZBgDIAEoCRIRCglwbGF5ZXJfaWQYBCABKAkSRAoVZmVhdHVyZV9jb25maWd1cmF0aW9uGAUgASgLMiUuc3Bhd25lci5tYWluLnYxLkZlYXR1cmVDb25maWd1cmF0aW9uEj0KDWxhbmd1YWdlX2NvZGUYBiABKA4yJi5zcGF3bmVyLmxhbmd1YWdlX2NvZGUudjEuTGFuZ3VhZ2VDb2RlItsBChxHZW5lcmF0ZVNlc3Npb25Ub2tlblJlc3BvbnNlEhIKCnNlc3Npb25faWQYASABKAkSDQoFdG9rZW4YAiABKAkSEgoKdG9rZW5fdHlwZRgDIAEoCRIvCgtleHBpcmVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDwoHc3VjY2VzcxgFIAEoCBIrCgVlcnJvchgGIAEoCzIcLnNwYXduZXIuZXJyb3IudjEuRXJyb3JFdmVudBIVCg1yZWZyZXNoX3Rva2VuGAcgASgJIioKEUdldFNlc3Npb25SZXF1ZXN0EhUKDXNlc3Npb25fdG9rZW4YASABKAkiiQEKEkdldFNlc3Npb25SZXNwb25zZRISCgpzZXNzaW9uX2lkGAEgASgJEi8KC2V4cGlyZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBISCgppc19leHBpcmVkGAMgASgIEhoKEmN1cnJlbnRfY2hhbm5lbF9pZBgEIAEoCSIzChpSZWZyZXNoU2Vzc2lvblRva2VuUmVxdWVzdBIVCg1yZWZyZXNoX3Rva2VuGAEgASgJIsMBChtSZWZyZXNoU2Vzc2lvblRva2VuUmVzcG9uc2USEgoKc2Vzc2lvbl9pZBgBIAEoCRINCgV0b2tlbhgCIAEoCRISCgp0b2tlbl90eXBlGAMgASgJEi8KC2V4cGlyZV90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdzdWNjZXNzGAUgASgIEisKBWVycm9yGAYgASgLMhwuc3Bhd25lci5lcnJvci52MS5FcnJvckV2ZW50IhUKE0xlYXZlQ2hhbm5lbFJlcXVlc3QiOAoUTGVhdmVDaGFubmVsUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJMqYFCgtNYWluU2VydmljZRJzChRHZW5lcmF0ZVNlc3Npb25Ub2tlbhIsLnNwYXduZXIubWFpbi52MS5HZW5lcmF0ZVNlc3Npb25Ub2tlblJlcXVlc3QaLS5zcGF3bmVyLm1haW4udjEuR2VuZXJhdGVTZXNzaW9uVG9rZW5SZXNwb25zZRJwChNSZWZyZXNoU2Vzc2lvblRva2VuEisuc3Bhd25lci5tYWluLnYxLlJlZnJlc2hTZXNzaW9uVG9rZW5SZXF1ZXN0Giwuc3Bhd25lci5tYWluLnYxLlJlZnJlc2hTZXNzaW9uVG9rZW5SZXNwb25zZRJVCgpHZXRTZXNzaW9uEiIuc3Bhd25lci5tYWluLnYxLkdldFNlc3Npb25SZXF1ZXN0GiMuc3Bhd25lci5tYWluLnYxLkdldFNlc3Npb25SZXNwb25zZRJPCglMb2FkU2NlbmUSIC5zcGF3bmVyLnBhY2tldC52MS5TcGF3bmVyUGFja2V0GiAuc3Bhd25lci5wYWNrZXQudjEuU3Bhd25lclBhY2tldBJYCg5Db25uZWN0U2Vzc2lvbhIgLnNwYXduZXIucGFja2V0LnYxLlNwYXduZXJQYWNrZXQaIC5zcGF3bmVyLnBhY2tldC52MS5TcGF3bmVyUGFja2V0KAEwARJRCgtPcGVuQ2hhbm5lbBIgLnNwYXduZXIucGFja2V0LnYxLlNwYXduZXJQYWNrZXQaIC5zcGF3bmVyLnBhY2tldC52MS5TcGF3bmVyUGFja2V0ElsKDExlYXZlQ2hhbm5lbBIkLnNwYXduZXIubWFpbi52MS5MZWF2ZUNoYW5uZWxSZXF1ZXN0GiUuc3Bhd25lci5tYWluLnYxLkxlYXZlQ2hhbm5lbFJlc3BvbnNlQn4KE2NvbS5zcGF3bmVyLm1haW4udjFCCU1haW5Qcm90b1ABogIDU01YqgIPU3Bhd25lci5NYWluLlYxygIPU3Bhd25lclxNYWluXFYx4gIbU3Bhd25lclxNYWluXFYxXEdQQk1ldGFkYXRh6gIRU3Bhd25lcjo6TWFpbjo6VjFiBnByb3RvMw", [file_google_protobuf_timestamp, file_spawner_error_v1_error, file_spawner_language_code_v1_language_code, file_spawner_packet_v1_packet]);

/**
 * Configuration to control the features enabled. If set to false, the process
 * will be skipped. Note that enabling some features may result in noticeably
 * longer processing times.
 *
 * @generated from message spawner.main.v1.FeatureConfiguration
 */
export type FeatureConfiguration = Message<"spawner.main.v1.FeatureConfiguration"> & {
  /**
   * @generated from field: bool emotion = 1;
   */
  emotion: boolean;

  /**
   * @generated from field: bool input_filter = 2;
   */
  inputFilter: boolean;

  /**
   * @generated from field: bool command = 3;
   */
  command: boolean;

  /**
   * @generated from field: bool memory = 4;
   */
  memory: boolean;
};

/**
 * Describes the message spawner.main.v1.FeatureConfiguration.
 * Use `create(FeatureConfigurationSchema)` to create a new message.
 */
export const FeatureConfigurationSchema: GenMessage<FeatureConfiguration> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 0);

/**
 * @generated from message spawner.main.v1.GenerateSessionTokenRequest
 */
export type GenerateSessionTokenRequest = Message<"spawner.main.v1.GenerateSessionTokenRequest"> & {
  /**
   * @generated from field: string api_key = 1;
   */
  apiKey: string;

  /**
   * @generated from field: string api_secret = 2;
   */
  apiSecret: string;

  /**
   * @generated from field: string workspace_id = 3;
   */
  workspaceId: string;

  /**
   * @generated from field: string player_id = 4;
   */
  playerId: string;

  /**
   * @generated from field: spawner.main.v1.FeatureConfiguration feature_configuration = 5;
   */
  featureConfiguration?: FeatureConfiguration;

  /**
   * @generated from field: spawner.language_code.v1.LanguageCode language_code = 6;
   */
  languageCode: LanguageCode;
};

/**
 * Describes the message spawner.main.v1.GenerateSessionTokenRequest.
 * Use `create(GenerateSessionTokenRequestSchema)` to create a new message.
 */
export const GenerateSessionTokenRequestSchema: GenMessage<GenerateSessionTokenRequest> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 1);

/**
 * @generated from message spawner.main.v1.GenerateSessionTokenResponse
 */
export type GenerateSessionTokenResponse = Message<"spawner.main.v1.GenerateSessionTokenResponse"> & {
  /**
   * Unique identifier for the session.
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * JWT token representing a session.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Indicates the type of token. i.e. 'Bearer'
   *
   * @generated from field: string token_type = 3;
   */
  tokenType: string;

  /**
   * Timestamp indicating when the session token expires.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 4;
   */
  expireTime?: Timestamp;

  /**
   * Set to true if the session token has been generated successfully.
   *
   * @generated from field: bool success = 5;
   */
  success: boolean;

  /**
   * @generated from field: spawner.error.v1.ErrorEvent error = 6;
   */
  error?: ErrorEvent;

  /**
   * Refresh token to retain session id past the expire time. The refresh token
   * is invalidated in 24 hours.
   *
   * @generated from field: string refresh_token = 7;
   */
  refreshToken: string;
};

/**
 * Describes the message spawner.main.v1.GenerateSessionTokenResponse.
 * Use `create(GenerateSessionTokenResponseSchema)` to create a new message.
 */
export const GenerateSessionTokenResponseSchema: GenMessage<GenerateSessionTokenResponse> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 2);

/**
 * @generated from message spawner.main.v1.GetSessionRequest
 */
export type GetSessionRequest = Message<"spawner.main.v1.GetSessionRequest"> & {
  /**
   * JWT token representing a session.
   *
   * @generated from field: string session_token = 1;
   */
  sessionToken: string;
};

/**
 * Describes the message spawner.main.v1.GetSessionRequest.
 * Use `create(GetSessionRequestSchema)` to create a new message.
 */
export const GetSessionRequestSchema: GenMessage<GetSessionRequest> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 3);

/**
 * @generated from message spawner.main.v1.GetSessionResponse
 */
export type GetSessionResponse = Message<"spawner.main.v1.GetSessionResponse"> & {
  /**
   * Unique identifier for the session.
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * Timestamp indicating when the session token expires.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 2;
   */
  expireTime?: Timestamp;

  /**
   * Boolean indicating whether the session is currently expired. Implements
   * a buffer period where value is `True` before the actual `expire_time`.
   *
   * @generated from field: bool is_expired = 3;
   */
  isExpired: boolean;

  /**
   * Indicates channel id currently publishing to / is subscribed to.
   *
   * @generated from field: string current_channel_id = 4;
   */
  currentChannelId: string;
};

/**
 * Describes the message spawner.main.v1.GetSessionResponse.
 * Use `create(GetSessionResponseSchema)` to create a new message.
 */
export const GetSessionResponseSchema: GenMessage<GetSessionResponse> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 4);

/**
 * @generated from message spawner.main.v1.RefreshSessionTokenRequest
 */
export type RefreshSessionTokenRequest = Message<"spawner.main.v1.RefreshSessionTokenRequest"> & {
  /**
   * @generated from field: string refresh_token = 1;
   */
  refreshToken: string;
};

/**
 * Describes the message spawner.main.v1.RefreshSessionTokenRequest.
 * Use `create(RefreshSessionTokenRequestSchema)` to create a new message.
 */
export const RefreshSessionTokenRequestSchema: GenMessage<RefreshSessionTokenRequest> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 5);

/**
 * @generated from message spawner.main.v1.RefreshSessionTokenResponse
 */
export type RefreshSessionTokenResponse = Message<"spawner.main.v1.RefreshSessionTokenResponse"> & {
  /**
   * Unique identifier for the session.
   *
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * JWT token representing a session.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Indicates the type of token. i.e. 'Bearer'
   *
   * @generated from field: string token_type = 3;
   */
  tokenType: string;

  /**
   * Timestamp indicating when the session token expires.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 4;
   */
  expireTime?: Timestamp;

  /**
   * Set to true if the refresh is successful.
   *
   * @generated from field: bool success = 5;
   */
  success: boolean;

  /**
   * @generated from field: spawner.error.v1.ErrorEvent error = 6;
   */
  error?: ErrorEvent;
};

/**
 * Describes the message spawner.main.v1.RefreshSessionTokenResponse.
 * Use `create(RefreshSessionTokenResponseSchema)` to create a new message.
 */
export const RefreshSessionTokenResponseSchema: GenMessage<RefreshSessionTokenResponse> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 6);

/**
 * @generated from message spawner.main.v1.LeaveChannelRequest
 */
export type LeaveChannelRequest = Message<"spawner.main.v1.LeaveChannelRequest"> & {
};

/**
 * Describes the message spawner.main.v1.LeaveChannelRequest.
 * Use `create(LeaveChannelRequestSchema)` to create a new message.
 */
export const LeaveChannelRequestSchema: GenMessage<LeaveChannelRequest> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 7);

/**
 * @generated from message spawner.main.v1.LeaveChannelResponse
 */
export type LeaveChannelResponse = Message<"spawner.main.v1.LeaveChannelResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message spawner.main.v1.LeaveChannelResponse.
 * Use `create(LeaveChannelResponseSchema)` to create a new message.
 */
export const LeaveChannelResponseSchema: GenMessage<LeaveChannelResponse> = /*@__PURE__*/
  messageDesc(file_spawner_main_v1_main, 8);

/**
 * @generated from service spawner.main.v1.MainService
 */
export const MainService: GenService<{
  /**
   * Generates a JWT to access the API with a given API key and secret.
   * Initializes session record and loads workspace data to Redis.
   *
   * @generated from rpc spawner.main.v1.MainService.GenerateSessionToken
   */
  generateSessionToken: {
    methodKind: "unary";
    input: typeof GenerateSessionTokenRequestSchema;
    output: typeof GenerateSessionTokenResponseSchema;
  },
  /**
   * Returns session token from a refresh token.
   *
   * @generated from rpc spawner.main.v1.MainService.RefreshSessionToken
   */
  refreshSessionToken: {
    methodKind: "unary";
    input: typeof RefreshSessionTokenRequestSchema;
    output: typeof RefreshSessionTokenResponseSchema;
  },
  /**
   * Gets session for passed identifier.
   *
   * @generated from rpc spawner.main.v1.MainService.GetSession
   */
  getSession: {
    methodKind: "unary";
    input: typeof GetSessionRequestSchema;
    output: typeof GetSessionResponseSchema;
  },
  /**
   * Loads scene to a session. Accepts adhoc scenes.
   *
   * @generated from rpc spawner.main.v1.MainService.LoadScene
   */
  loadScene: {
    methodKind: "unary";
    input: typeof SpawnerPacketSchema;
    output: typeof SpawnerPacketSchema;
  },
  /**
   * Handles session specific processes.
   *
   * @generated from rpc spawner.main.v1.MainService.ConnectSession
   */
  connectSession: {
    methodKind: "bidi_streaming";
    input: typeof SpawnerPacketSchema;
    output: typeof SpawnerPacketSchema;
  },
  /**
   * Opens a channel with initial values.
   *
   * @generated from rpc spawner.main.v1.MainService.OpenChannel
   */
  openChannel: {
    methodKind: "unary";
    input: typeof SpawnerPacketSchema;
    output: typeof SpawnerPacketSchema;
  },
  /**
   * Leaves current channel the session is subscribed to.
   *
   * @generated from rpc spawner.main.v1.MainService.LeaveChannel
   */
  leaveChannel: {
    methodKind: "unary";
    input: typeof LeaveChannelRequestSchema;
    output: typeof LeaveChannelResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_spawner_main_v1_main, 0);

