// @generated by protoc-gen-connect-es v1.4.0
// @generated from file spawner/main/v1/main.proto (package spawner.main.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GenerateSessionTokenRequest, GenerateSessionTokenResponse, GetSessionRequest, GetSessionResponse, LeaveChannelRequest, LeaveChannelResponse } from "./main_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { SpawnerPacket } from "../../packet/v1/packet_pb.js";

/**
 * @generated from service spawner.main.v1.MainService
 */
export declare const MainService: {
  readonly typeName: "spawner.main.v1.MainService",
  readonly methods: {
    /**
     * Generates a JWT to access the API with a given API key and secret.
     * Initializes session record and loads workspace data to Redis.
     *
     * @generated from rpc spawner.main.v1.MainService.GenerateSessionToken
     */
    readonly generateSessionToken: {
      readonly name: "GenerateSessionToken",
      readonly I: typeof GenerateSessionTokenRequest,
      readonly O: typeof GenerateSessionTokenResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Gets session for passed identifier.
     *
     * @generated from rpc spawner.main.v1.MainService.GetSession
     */
    readonly getSession: {
      readonly name: "GetSession",
      readonly I: typeof GetSessionRequest,
      readonly O: typeof GetSessionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Loads scene to a session. Accepts adhoc scenes.
     *
     * @generated from rpc spawner.main.v1.MainService.LoadScene
     */
    readonly loadScene: {
      readonly name: "LoadScene",
      readonly I: typeof SpawnerPacket,
      readonly O: typeof SpawnerPacket,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Handles session specific processes.
     *
     * @generated from rpc spawner.main.v1.MainService.ConnectSession
     */
    readonly connectSession: {
      readonly name: "ConnectSession",
      readonly I: typeof SpawnerPacket,
      readonly O: typeof SpawnerPacket,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * Opens a channel with initial values.
     *
     * @generated from rpc spawner.main.v1.MainService.OpenChannel
     */
    readonly openChannel: {
      readonly name: "OpenChannel",
      readonly I: typeof SpawnerPacket,
      readonly O: typeof SpawnerPacket,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Leaves current channel the session is subscribed to.
     *
     * @generated from rpc spawner.main.v1.MainService.LeaveChannel
     */
    readonly leaveChannel: {
      readonly name: "LeaveChannel",
      readonly I: typeof LeaveChannelRequest,
      readonly O: typeof LeaveChannelResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

