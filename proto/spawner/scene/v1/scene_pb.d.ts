// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/scene/v1/scene.proto (package spawner.scene.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message spawner.scene.v1.SceneCharacter
 */
export declare class SceneCharacter extends Message<SceneCharacter> {
  /**
   * Only output. Relative resource path.
   * Format: `workspaces:{workspace_id}:characters:{character_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * If a value is passed in a mutation request, the API
   * should try to add the character to the scene.
   *
   * @generated from field: string custom_id = 2;
   */
  customId: string;

  constructor(data?: PartialMessage<SceneCharacter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.scene.v1.SceneCharacter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SceneCharacter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SceneCharacter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SceneCharacter;

  static equals(a: SceneCharacter | PlainMessage<SceneCharacter> | undefined, b: SceneCharacter | PlainMessage<SceneCharacter> | undefined): boolean;
}

/**
 * Indicates the scene for the session.
 * Note that fields can be overidden by another.
 * Priority should be documented in the fields.
 *
 * @generated from message spawner.scene.v1.Scene
 */
export declare class Scene extends Message<Scene> {
  /**
   * Only output. Relative resource path.
   * Format: `workspaces:{workspace_id}:scenes:{scene_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Indicates the custom identifier of the scene.
   * Note that it may not be the same as the record id in storage.
   * This value has highest priority.
   *
   * @generated from field: string custom_id = 2;
   */
  customId: string;

  /**
   * The text description of the scene.
   * If this is set to `LOAD` a scene, the value will be used to create
   * an adhoc scene. Ignore this value if `custom_id` is provided.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Indicates the characters in the scene.
   *
   * @generated from field: repeated spawner.scene.v1.SceneCharacter characters = 4;
   */
  characters: SceneCharacter[];

  constructor(data?: PartialMessage<Scene>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.scene.v1.Scene";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Scene;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Scene;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Scene;

  static equals(a: Scene | PlainMessage<Scene> | undefined, b: Scene | PlainMessage<Scene> | undefined): boolean;
}

/**
 * Interface for scene mutations. Mutates scene info
 * at runtime. Allows dynamic modification of the scene description,
 * without changing the `custom_id` of the current scene.
 *
 * Note that mutations do not update the original scene data, and
 * do not persist past a single session.
 *
 * @generated from message spawner.scene.v1.SceneMutationEvent
 */
export declare class SceneMutationEvent extends Message<SceneMutationEvent> {
  /**
   * The text description of the scene.
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * Indicates the characters to add to the scene. Mutation
   * must only be able to add characters. It cannot remove
   * characters from a scene.
   *
   * @generated from field: repeated spawner.scene.v1.SceneCharacter characters = 2;
   */
  characters: SceneCharacter[];

  constructor(data?: PartialMessage<SceneMutationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.scene.v1.SceneMutationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SceneMutationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SceneMutationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SceneMutationEvent;

  static equals(a: SceneMutationEvent | PlainMessage<SceneMutationEvent> | undefined, b: SceneMutationEvent | PlainMessage<SceneMutationEvent> | undefined): boolean;
}

