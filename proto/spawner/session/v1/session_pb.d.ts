// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/session/v1/session.proto (package spawner.session.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Scene, SceneMutationEvent } from "../../scene/v1/scene_pb.js";

/**
 * @generated from enum spawner.session.v1.SessionControllerType
 */
export declare enum SessionControllerType {
  /**
   * @generated from enum value: SESSION_CONTROLLER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Loads data to session based on the content set on the Spawner Console.
   *
   * @generated from enum value: SESSION_CONTROLLER_TYPE_LOAD = 1;
   */
  LOAD = 1,

  /**
   * Mutates properties in realtime. This updates session-specific values.
   *
   * @generated from enum value: SESSION_CONTROLLER_TYPE_MUTATE = 2;
   */
  MUTATE = 2,
}

/**
 * @generated from enum spawner.session.v1.SessionMutationEventType
 */
export declare enum SessionMutationEventType {
  /**
   * @generated from enum value: SESSION_MUTATION_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Set for scene mutations.
   *
   * @generated from enum value: SESSION_MUTATION_EVENT_TYPE_SCENE = 1;
   */
  SCENE = 1,
}

/**
 * @generated from message spawner.session.v1.SessionMutationEvent
 */
export declare class SessionMutationEvent extends Message<SessionMutationEvent> {
  /**
   * @generated from field: spawner.session.v1.SessionMutationEventType type = 1;
   */
  type: SessionMutationEventType;

  /**
   * @generated from oneof spawner.session.v1.SessionMutationEvent.payload
   */
  payload: {
    /**
     * @generated from field: spawner.scene.v1.SceneMutationEvent scene = 2;
     */
    value: SceneMutationEvent;
    case: "scene";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SessionMutationEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.session.v1.SessionMutationEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionMutationEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionMutationEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionMutationEvent;

  static equals(a: SessionMutationEvent | PlainMessage<SessionMutationEvent> | undefined, b: SessionMutationEvent | PlainMessage<SessionMutationEvent> | undefined): boolean;
}

/**
 * @generated from message spawner.session.v1.SessionController
 */
export declare class SessionController extends Message<SessionController> {
  /**
   * @generated from field: spawner.session.v1.SessionControllerType type = 1;
   */
  type: SessionControllerType;

  /**
   * @generated from oneof spawner.session.v1.SessionController.payload
   */
  payload: {
    /**
     * Indicates the scene for the session.
     *
     * @generated from field: spawner.scene.v1.Scene scene = 2;
     */
    value: Scene;
    case: "scene";
  } | {
    /**
     * Input only. The results for the mutation event
     * should be returned in `scene` field. `type` field
     * must be set to `MUTATE`.
     *
     * @generated from field: spawner.session.v1.SessionMutationEvent mutation = 3;
     */
    value: SessionMutationEvent;
    case: "mutation";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SessionController>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.session.v1.SessionController";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionController;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionController;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionController;

  static equals(a: SessionController | PlainMessage<SessionController> | undefined, b: SessionController | PlainMessage<SessionController> | undefined): boolean;
}

