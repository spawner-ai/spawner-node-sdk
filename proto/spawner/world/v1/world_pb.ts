// @generated by protoc-gen-es v2.2.0 with parameter "target=ts"
// @generated from file spawner/world/v1/world.proto (package spawner.world.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ObservationEvent } from "../../observation/v1/observation_pb";
import { file_spawner_observation_v1_observation } from "../../observation/v1/observation_pb";
import type { PlanEvent } from "../../plan/v1/plan_pb";
import { file_spawner_plan_v1_plan } from "../../plan/v1/plan_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file spawner/world/v1/world.proto.
 */
export const file_spawner_world_v1_world: GenFile = /*@__PURE__*/
  fileDesc("ChxzcGF3bmVyL3dvcmxkL3YxL3dvcmxkLnByb3RvEhBzcGF3bmVyLndvcmxkLnYxIjEKDkFnZW50Q2hhcmFjdGVyEgwKBG5hbWUYASABKAkSEQoJY3VzdG9tX2lkGAIgASgJIkkKFkFnZW50RnVuY3Rpb25QYXJhbWV0ZXISDAoEbmFtZRgBIAEoCRIMCgR0eXBlGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJImwKDUFnZW50RnVuY3Rpb24SDAoEbmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRI4CgZwYXJhbXMYAyADKAsyKC5zcGF3bmVyLndvcmxkLnYxLkFnZW50RnVuY3Rpb25QYXJhbWV0ZXIiyAEKEkFnZW50Q29uZmlndXJhdGlvbhIKCgJpZBgBIAEoCRIUCgxibHVlcHJpbnRfaWQYAiABKAkSFAoMZGlzcGxheV9uYW1lGAMgASgJEjMKCWNoYXJhY3RlchgEIAEoCzIgLnNwYXduZXIud29ybGQudjEuQWdlbnRDaGFyYWN0ZXISMgoJZnVuY3Rpb25zGAUgAygLMh8uc3Bhd25lci53b3JsZC52MS5BZ2VudEZ1bmN0aW9uEhEKCW9iamVjdGl2ZRgGIAEoCSJaChBDcmVhdGVXb3JsZEV2ZW50EhAKCHdvcmxkX2lkGAEgASgJEjQKBmFnZW50cxgCIAMoCzIkLnNwYXduZXIud29ybGQudjEuQWdlbnRDb25maWd1cmF0aW9uIvQBCg9Xb3JsZENvbnRyb2xsZXISMwoEdHlwZRgBIAEoDjIlLnNwYXduZXIud29ybGQudjEuV29ybGRDb250cm9sbGVyVHlwZRI0CgZjcmVhdGUYAiABKAsyIi5zcGF3bmVyLndvcmxkLnYxLkNyZWF0ZVdvcmxkRXZlbnRIABI/CgtvYnNlcnZhdGlvbhgDIAEoCzIoLnNwYXduZXIub2JzZXJ2YXRpb24udjEuT2JzZXJ2YXRpb25FdmVudEgAEioKBHBsYW4YBCABKAsyGi5zcGF3bmVyLnBsYW4udjEuUGxhbkV2ZW50SABCCQoHcGF5bG9hZCqlAQoTV29ybGRDb250cm9sbGVyVHlwZRIlCiFXT1JMRF9DT05UUk9MTEVSX1RZUEVfVU5TUEVDSUZJRUQQABIgChxXT1JMRF9DT05UUk9MTEVSX1RZUEVfQ1JFQVRFEAESJQohV09STERfQ09OVFJPTExFUl9UWVBFX09CU0VSVkFUSU9OEAISHgoaV09STERfQ09OVFJPTExFUl9UWVBFX1BMQU4QA0KEAQoUY29tLnNwYXduZXIud29ybGQudjFCCldvcmxkUHJvdG9QAaICA1NXWKoCEFNwYXduZXIuV29ybGQuVjHKAhBTcGF3bmVyXFdvcmxkXFYx4gIcU3Bhd25lclxXb3JsZFxWMVxHUEJNZXRhZGF0YeoCElNwYXduZXI6OldvcmxkOjpWMWIGcHJvdG8z", [file_spawner_observation_v1_observation, file_spawner_plan_v1_plan]);

/**
 * @generated from message spawner.world.v1.AgentCharacter
 */
export type AgentCharacter = Message<"spawner.world.v1.AgentCharacter"> & {
  /**
   * Only output. Relative resource path.
   * Format: `workspaces:{workspace_id}:characters:{character_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string custom_id = 2;
   */
  customId: string;
};

/**
 * Describes the message spawner.world.v1.AgentCharacter.
 * Use `create(AgentCharacterSchema)` to create a new message.
 */
export const AgentCharacterSchema: GenMessage<AgentCharacter> = /*@__PURE__*/
  messageDesc(file_spawner_world_v1_world, 0);

/**
 * @generated from message spawner.world.v1.AgentFunctionParameter
 */
export type AgentFunctionParameter = Message<"spawner.world.v1.AgentFunctionParameter"> & {
  /**
   * Indicates the name of the parameter.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Indicates the type of value. Python types are preferred, but not strictly
   * necessary.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Description of the parameter.
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message spawner.world.v1.AgentFunctionParameter.
 * Use `create(AgentFunctionParameterSchema)` to create a new message.
 */
export const AgentFunctionParameterSchema: GenMessage<AgentFunctionParameter> = /*@__PURE__*/
  messageDesc(file_spawner_world_v1_world, 1);

/**
 * @generated from message spawner.world.v1.AgentFunction
 */
export type AgentFunction = Message<"spawner.world.v1.AgentFunction"> & {
  /**
   * Indicates the name of the function.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Describes the function.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Indicates the parameters the function accepts.
   *
   * @generated from field: repeated spawner.world.v1.AgentFunctionParameter params = 3;
   */
  params: AgentFunctionParameter[];
};

/**
 * Describes the message spawner.world.v1.AgentFunction.
 * Use `create(AgentFunctionSchema)` to create a new message.
 */
export const AgentFunctionSchema: GenMessage<AgentFunction> = /*@__PURE__*/
  messageDesc(file_spawner_world_v1_world, 2);

/**
 * @generated from message spawner.world.v1.AgentConfiguration
 */
export type AgentConfiguration = Message<"spawner.world.v1.AgentConfiguration"> & {
  /**
   * Only ouput.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Indicates the agent blueprint used by this agent. May be left empty if the
   * agent is not autonomous.
   *
   * @generated from field: string blueprint_id = 2;
   */
  blueprintId: string;

  /**
   * Only input. If `display_name` is defined, it overwrites the `display_name`
   * defined in the character.
   *
   * For example, a character that is shared among multiple agents may have a
   * generic name, this field may set a unique name for each agent. This way,
   * you may reuse character settings while making them appear to be different
   * characters.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * @generated from field: spawner.world.v1.AgentCharacter character = 4;
   */
  character?: AgentCharacter;

  /**
   * Functions the agent is able to call to achieve objectives. Note that this
   * is only used if the agent is autonomous.
   *
   * @generated from field: repeated spawner.world.v1.AgentFunction functions = 5;
   */
  functions: AgentFunction[];

  /**
   * Defines the initial objective of the agent. Note that the objective is
   * likely to change as the agent reacts to its observations.
   *
   * @generated from field: string objective = 6;
   */
  objective: string;
};

/**
 * Describes the message spawner.world.v1.AgentConfiguration.
 * Use `create(AgentConfigurationSchema)` to create a new message.
 */
export const AgentConfigurationSchema: GenMessage<AgentConfiguration> = /*@__PURE__*/
  messageDesc(file_spawner_world_v1_world, 3);

/**
 * @generated from message spawner.world.v1.CreateWorldEvent
 */
export type CreateWorldEvent = Message<"spawner.world.v1.CreateWorldEvent"> & {
  /**
   * Only output. The id of the world that has been created.
   *
   * @generated from field: string world_id = 1;
   */
  worldId: string;

  /**
   * @generated from field: repeated spawner.world.v1.AgentConfiguration agents = 2;
   */
  agents: AgentConfiguration[];
};

/**
 * Describes the message spawner.world.v1.CreateWorldEvent.
 * Use `create(CreateWorldEventSchema)` to create a new message.
 */
export const CreateWorldEventSchema: GenMessage<CreateWorldEvent> = /*@__PURE__*/
  messageDesc(file_spawner_world_v1_world, 4);

/**
 * Message for Spawner Worlds. A world is a high-level entity with the primary
 * role of mananging autonomous agents. Agents are always attached to a
 * character. Generally, character defines the personality, and agent defines
 * the thought and autonomous behavior given a stream of information about its
 * surrounding. At a basic level, agents are able to receive 'observation's and 'plan'
 * accordingly.
 *
 * @generated from message spawner.world.v1.WorldController
 */
export type WorldController = Message<"spawner.world.v1.WorldController"> & {
  /**
   * @generated from field: spawner.world.v1.WorldControllerType type = 1;
   */
  type: WorldControllerType;

  /**
   * @generated from oneof spawner.world.v1.WorldController.payload
   */
  payload: {
    /**
     * @generated from field: spawner.world.v1.CreateWorldEvent create = 2;
     */
    value: CreateWorldEvent;
    case: "create";
  } | {
    /**
     * @generated from field: spawner.observation.v1.ObservationEvent observation = 3;
     */
    value: ObservationEvent;
    case: "observation";
  } | {
    /**
     * @generated from field: spawner.plan.v1.PlanEvent plan = 4;
     */
    value: PlanEvent;
    case: "plan";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message spawner.world.v1.WorldController.
 * Use `create(WorldControllerSchema)` to create a new message.
 */
export const WorldControllerSchema: GenMessage<WorldController> = /*@__PURE__*/
  messageDesc(file_spawner_world_v1_world, 5);

/**
 * @generated from enum spawner.world.v1.WorldControllerType
 */
export enum WorldControllerType {
  /**
   * @generated from enum value: WORLD_CONTROLLER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Creates a new world.
   *
   * @generated from enum value: WORLD_CONTROLLER_TYPE_CREATE = 1;
   */
  CREATE = 1,

  /**
   * Adds agent observation.
   *
   * @generated from enum value: WORLD_CONTROLLER_TYPE_OBSERVATION = 2;
   */
  OBSERVATION = 2,

  /**
   * Construct a plan of tasks.
   *
   * @generated from enum value: WORLD_CONTROLLER_TYPE_PLAN = 3;
   */
  PLAN = 3,
}

/**
 * Describes the enum spawner.world.v1.WorldControllerType.
 */
export const WorldControllerTypeSchema: GenEnum<WorldControllerType> = /*@__PURE__*/
  enumDesc(file_spawner_world_v1_world, 0);

