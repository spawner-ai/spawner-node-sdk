// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/packet/v1/packet.proto (package spawner.packet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Routing } from "../../routing/v1/routing_pb.js";
import type { ErrorEvent } from "../../error/v1/error_pb.js";
import type { SessionController } from "../../session/v1/session_pb.js";
import type { ChannelController } from "../../channel/v1/channel_pb.js";
import type { TextEvent } from "../../text/v1/text_pb.js";
import type { InputFilterEvent } from "../../input_filter/v1/input_filter_pb.js";
import type { EmotionEvent } from "../../emotion/v1/emotion_pb.js";
import type { KnowledgeEvent } from "../../knowledge/v1/knowledge_pb.js";

/**
 * @generated from enum spawner.packet.v1.SpawnerPacketType
 */
export declare enum SpawnerPacketType {
  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_SESSION_CONTROLLER = 1;
   */
  SESSION_CONTROLLER = 1,

  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_CHANNEL_CONTROLLER = 2;
   */
  CHANNEL_CONTROLLER = 2,

  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_TEXT = 3;
   */
  TEXT = 3,

  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_INPUT_FILTER = 4;
   */
  INPUT_FILTER = 4,

  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_EMOTION = 5;
   */
  EMOTION = 5,

  /**
   * @generated from enum value: SPAWNER_PACKET_TYPE_KNOWLEDGE = 6;
   */
  KNOWLEDGE = 6,
}

/**
 * @generated from message spawner.packet.v1.SpawnerPacket
 */
export declare class SpawnerPacket extends Message<SpawnerPacket> {
  /**
   * Output only.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: spawner.packet.v1.SpawnerPacketType type = 2;
   */
  type: SpawnerPacketType;

  /**
   * Indicates routing of the event. For example, the source actor
   * and the target actor of the event.
   *
   * @generated from field: spawner.routing.v1.Routing routing = 3;
   */
  routing?: Routing;

  /**
   * Output only. Sets to True if the requested operation has
   * been fulfilled.
   *
   * @generated from field: bool success = 4;
   */
  success: boolean;

  /**
   * Output only. The field is only populated on error.
   *
   * @generated from field: spawner.error.v1.ErrorEvent error = 5;
   */
  error?: ErrorEvent;

  /**
   * @generated from oneof spawner.packet.v1.SpawnerPacket.payload
   */
  payload: {
    /**
     * Controls session state.
     *
     * @generated from field: spawner.session.v1.SessionController session_controller = 6;
     */
    value: SessionController;
    case: "sessionController";
  } | {
    /**
     * Controls channel creation and state.
     *
     * @generated from field: spawner.channel.v1.ChannelController channel_controller = 7;
     */
    value: ChannelController;
    case: "channelController";
  } | {
    /**
     * Text generation input/output. Streams output text per token.
     *
     * @generated from field: spawner.text.v1.TextEvent text = 8;
     */
    value: TextEvent;
    case: "text";
  } | {
    /**
     * Output only. Returns a value when the text input is flagged.
     *
     * @generated from field: spawner.input_filter.v1.InputFilterEvent input_filter = 9;
     */
    value: InputFilterEvent;
    case: "inputFilter";
  } | {
    /**
     * Output only. Indicates the emotion values for the target character.
     *
     * @generated from field: spawner.emotion.v1.EmotionEvent emotion = 10;
     */
    value: EmotionEvent;
    case: "emotion";
  } | {
    /**
     * Output only. Indicates the knowledge referenced during text generation.
     *
     * @generated from field: spawner.knowledge.v1.KnowledgeEvent knowledge = 11;
     */
    value: KnowledgeEvent;
    case: "knowledge";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<SpawnerPacket>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spawner.packet.v1.SpawnerPacket";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpawnerPacket;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpawnerPacket;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpawnerPacket;

  static equals(a: SpawnerPacket | PlainMessage<SpawnerPacket> | undefined, b: SpawnerPacket | PlainMessage<SpawnerPacket> | undefined): boolean;
}

