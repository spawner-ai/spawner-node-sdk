// @generated by protoc-gen-es v1.10.0
// @generated from file spawner/packet/v1/packet.proto (package spawner.packet.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { Routing } from "../../routing/v1/routing_pb.js";
import { ErrorEvent } from "../../error/v1/error_pb.js";
import { SessionController } from "../../session/v1/session_pb.js";
import { ChannelController } from "../../channel/v1/channel_pb.js";
import { TextEvent } from "../../text/v1/text_pb.js";
import { InputFilterEvent } from "../../input_filter/v1/input_filter_pb.js";
import { EmotionEvent } from "../../emotion/v1/emotion_pb.js";
import { KnowledgeEvent } from "../../knowledge/v1/knowledge_pb.js";

/**
 * @generated from enum spawner.packet.v1.SpawnerPacketType
 */
export const SpawnerPacketType = /*@__PURE__*/ proto3.makeEnum(
  "spawner.packet.v1.SpawnerPacketType",
  [
    {no: 0, name: "SPAWNER_PACKET_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "SPAWNER_PACKET_TYPE_SESSION_CONTROLLER", localName: "SESSION_CONTROLLER"},
    {no: 2, name: "SPAWNER_PACKET_TYPE_CHANNEL_CONTROLLER", localName: "CHANNEL_CONTROLLER"},
    {no: 3, name: "SPAWNER_PACKET_TYPE_TEXT", localName: "TEXT"},
    {no: 4, name: "SPAWNER_PACKET_TYPE_INPUT_FILTER", localName: "INPUT_FILTER"},
    {no: 5, name: "SPAWNER_PACKET_TYPE_EMOTION", localName: "EMOTION"},
    {no: 6, name: "SPAWNER_PACKET_TYPE_KNOWLEDGE", localName: "KNOWLEDGE"},
  ],
);

/**
 * @generated from message spawner.packet.v1.SpawnerPacket
 */
export const SpawnerPacket = /*@__PURE__*/ proto3.makeMessageType(
  "spawner.packet.v1.SpawnerPacket",
  () => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SpawnerPacketType) },
    { no: 3, name: "routing", kind: "message", T: Routing },
    { no: 4, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "error", kind: "message", T: ErrorEvent },
    { no: 6, name: "session_controller", kind: "message", T: SessionController, oneof: "payload" },
    { no: 7, name: "channel_controller", kind: "message", T: ChannelController, oneof: "payload" },
    { no: 8, name: "text", kind: "message", T: TextEvent, oneof: "payload" },
    { no: 9, name: "input_filter", kind: "message", T: InputFilterEvent, oneof: "payload" },
    { no: 10, name: "emotion", kind: "message", T: EmotionEvent, oneof: "payload" },
    { no: 11, name: "knowledge", kind: "message", T: KnowledgeEvent, oneof: "payload" },
  ],
);

